"""
Django settings for file_save_system project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 处理PyInstaller打包后的路径问题
if getattr(sys, 'frozen', False):
    # PyInstaller打包后的路径
    BASE_DIR = Path(sys._MEIPASS)
else:
    # 开发环境路径
    BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_*7=2avcz8j!g3e+0^%-q1lkb$@i+z_=g!^5)b358$861kkuob'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# 优化系统检查设置
SILENCED_SYSTEM_CHECKS = [
    'admin.E001',  # 跳过admin检查
    'security.W019',  # 跳过CSRF检查
    'security.W020',  # 跳过ALLOWED_HOSTS检查
]

# 禁用一些不必要的中间件检查
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'corsheaders',
    'drf_yasg',
    'file_save',
    'file_history',
    'performance',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'file_save_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'file_save_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'data' / 'file_save.db',
    }
}

# 处理PyInstaller打包后的数据库路径
if getattr(sys, 'frozen', False):
    # 打包后使用可执行文件同目录下的数据库
    import tempfile
    import shutil
    
    # 获取可执行文件所在目录
    if hasattr(sys, '_MEIPASS'):
        # PyInstaller临时目录
        exe_dir = os.path.dirname(sys.executable)
    else:
        # 普通可执行文件目录
        exe_dir = os.path.dirname(sys.executable)
    
    # 创建数据目录
    data_dir = os.path.join(exe_dir, 'data')
    os.makedirs(data_dir, exist_ok=True)
    
    # 设置数据库路径
    DATABASES['default']['NAME'] = os.path.join(data_dir, 'file_save.db')
    
    # 设置模型文件路径
    MODELS_DIR = os.path.join(data_dir, 'models')
    os.makedirs(MODELS_DIR, exist_ok=True)
    
    # 设置日志目录
    LOGS_DIR = os.path.join(data_dir, 'logs')
    os.makedirs(LOGS_DIR, exist_ok=True)
    
    # 注意：LOGGING配置将在后面定义，这里先保存日志目录路径
    PACKAGED_LOGS_DIR = LOGS_DIR
    
    print(f"🔧 打包环境数据目录: {data_dir}")
    print(f"🗄️  数据库路径: {DATABASES['default']['NAME']}")
    print(f"🤖 模型目录: {MODELS_DIR}")
    print(f"📝 日志目录: {LOGS_DIR}")
else:
    # 开发环境模型路径
    MODELS_DIR = os.path.join(BASE_DIR, 'data', 'models')
    os.makedirs(MODELS_DIR, exist_ok=True)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

if getattr(sys, 'frozen', False):
    # 打包环境 - 使用可执行文件同目录
    exe_dir = os.path.dirname(sys.executable)
    STATIC_ROOT = os.path.join(exe_dir, 'staticfiles')
    STATICFILES_DIRS = [
        os.path.join(exe_dir, 'static'),
    ] if os.path.exists(os.path.join(exe_dir, 'static')) else []
else:
    # 开发环境
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    STATICFILES_DIRS = [
        BASE_DIR / 'static',
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework配置
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
}

# CORS配置
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# 允许的请求头 - 使用更完整的配置
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'content-language',
    'clientid',
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
]

# 允许的HTTP方法
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# 预检请求的最大缓存时间
CORS_PREFLIGHT_MAX_AGE = 86400

# 缓存配置 - 轻量级版本，无需Redis
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'smart-save-cache',
        'TIMEOUT': 300,  # 5分钟默认超时
        'OPTIONS': {
            'MAX_ENTRIES': 1000,  # 最大缓存条目数
            'CULL_FREQUENCY': 3,  # 清理频率
        }
    }
}

# 日志配置
# 确定日志文件路径
if getattr(sys, 'frozen', False) and 'PACKAGED_LOGS_DIR' in globals():
    # 打包环境
    log_file_path = os.path.join(PACKAGED_LOGS_DIR, 'django.log')
else:
    # 开发环境
    log_file_path = str(BASE_DIR / 'logs' / 'django.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': log_file_path,
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        '': {  # 根日志器
            'handlers': ['file', 'console'],
            'level': 'INFO',
        },
    },
}

# 处理PyInstaller打包后的其他设置
if getattr(sys, 'frozen', False):
    # 禁用Django的自动重载功能，避免与PyInstaller冲突
    USE_TZ = False
    DEBUG = False
    ALLOWED_HOSTS = ['*']  # 允许所有主机访问